name: Build Image and Publish

on:
  release:
    types: [ created ]
  workflow_dispatch:

env:
  IMAGE_NAME: ${{ secrets.IMAGES_HUB_REGISTRY_URL }}/${{ secrets.IMAGES_HUB_NAMESPACES }}/demo
  IMAGES_HUB_REGISTRY_URL: ${{ secrets.IMAGES_HUB_REGISTRY_URL }}
  IMAGES_HUB_USER_NAME: ${{ secrets.IMAGES_HUB_USER_NAME }}
  IMAGES_HUB_PASSWORD: ${{ secrets.IMAGES_HUB_PASSWORD }}
  IMAGES_HUB_EMAIL: hocgin@gmail.com
  KUBE_CONFIG: ${{ secrets.KUBE_CONFIG }}

  IMAGE_FRPC: ${{ secrets.IMAGES_HUB_REGISTRY_URL }}/${{ secrets.IMAGES_HUB_NAMESPACES }}/frpc
  IMAGE_FRPS: ${{ secrets.IMAGES_HUB_REGISTRY_URL }}/${{ secrets.IMAGES_HUB_NAMESPACES }}/frps
jobs:
  binary:
    name: Build Golang project
    runs-on: ubuntu-latest
    steps:
      - name: Set up Go 1.x
        uses: actions/setup-go@v2
        with:
          go-version: 1.17

      - run: |
          # https://github.com/actions/setup-go/issues/107
          cp -f `which go` /usr/bin/go

      - run: go version

      - name: Check out code into the Go module directory
        uses: actions/checkout@v2

      - name: Build
        run: make build

      - name: Archive artifacts for frpc
        uses: actions/upload-artifact@v1
        with:
          name: frpc
          path: bin/frpc

      - name: Archive artifacts for frps
        uses: actions/upload-artifact@v1
        with:
          name: frps
          path: bin/frps

  image:
    name: Build Image from Dockerfile and binaries
    runs-on: ubuntu-latest
    needs: binary
    steps:
      # environment
      - name: Checkout
        uses: actions/checkout@v2
        with:
          fetch-depth: '0'

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v1

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1

      # download binaries of frpc and frps
      - name: Download binary of frpc
        uses: actions/download-artifact@v2
        with:
          name: frpc
          path: bin/frpc

      - name: Download binary of frps
        uses: actions/download-artifact@v2
        with:
          name: frps
          path: bin/frps

      # get image tag name
      # 变量提取
      - name: Prepare
        id: prep
        run: |
          ################
          # 获取镜像信息
          ################
          DOCKER_IMAGE=${{ env.IMAGE_NAME }}
          VERSION=noop
          if [ "${{ github.event_name }}" = "schedule" ]; then
            VERSION=nightly
          elif [[ $GITHUB_REF == refs/tags/* ]]; then
            VERSION=${GITHUB_REF#refs/tags/}
          elif [[ $GITHUB_REF == refs/heads/* ]]; then
            VERSION=$(echo ${GITHUB_REF#refs/heads/} | sed -r 's#/+#-#g')
            if [ "${{ github.event.repository.default_branch }}" = "$VERSION" ]; then
              VERSION=edge
            fi
          elif [[ $GITHUB_REF == refs/pull/* ]]; then
            VERSION=pr-${{ github.event.number }}
          fi
          TAGS="${DOCKER_IMAGE}:${VERSION}"
          if [[ $VERSION =~ ^v[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}$ ]]; then
            MINOR=${VERSION%.*}
            MAJOR=${MINOR%.*}
            TAGS="$TAGS,${DOCKER_IMAGE}:${MINOR},${DOCKER_IMAGE}:${MAJOR},${DOCKER_IMAGE}:latest"
          elif [ "${{ github.event_name }}" = "push" ]; then
            TAGS="$TAGS,${DOCKER_IMAGE}:sha-${GITHUB_SHA::8}"
          fi
          # echo ::set-output name=version::${VERSION}
          echo ::set-output name=version::sha-${GITHUB_SHA::8}
          # echo ::set-output name=tags::${TAGS}
          echo ::set-output name=created::$(date -u +'%Y-%m-%dT%H:%M:%SZ')

          ################
          # 获取分支信息
          ################
          ENV=none
          BRANCH_NAME=none

          if [[ $GITHUB_REF == refs/tags/* ]]; then
            BRANCH_NAME=${GITHUB_REF#refs/tags/}
          elif [[ $GITHUB_REF == refs/heads/* ]]; then
            BRANCH_NAME=${GITHUB_REF#refs/heads/}
          fi

          echo $BRANCH_NAME

          if [[ $BRANCH_NAME == develop ]]; then
            ENV=test
          elif [[ $BRANCH_NAME =~ ^rls-.* ]]; then
            ENV=rls
          elif [[ $BRANCH_NAME =~ ^features-.* ]]; then
            ENV=dev
          elif [[ $BRANCH_NAME == master || $BRANCH_NAME == main || $BRANCH_NAME =~ ^v[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}$  ]]; then
            ENV=prod
          fi

          echo ::set-output name=env::${ENV}
          echo ::set-output name=branch_name::${BRANCH_NAME}
          echo ::set-output name=tags::${BRANCH_NAME}
      # 设置 Docker 编译环境
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1
      # 缓存 Docker 层
      - name: Cache Docker layers
        uses: actions/cache@v2
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-buildx-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-buildx-
      # 登陆 阿里云容器镜像中心
      - name: Login to DockerHub
        uses: docker/login-action@v1
        with:
          registry: ${{ env.IMAGES_HUB_REGISTRY_URL }}
          username: ${{ env.IMAGES_HUB_USER_NAME }}
          password: ${{ env.IMAGES_HUB_PASSWORD }}
      # 编译和发布镜像
      - name: Build & Push Docker Image::frpc
        uses: docker/build-push-action@v2
        with:
          context: .
          file: ./dockerfiles/Dockerfile-for-frpc
          push: true
          tags: ${{ env.IMAGE_FRPC }}:${{ steps.prep.outputs.version }}
          labels: |
            org.opencontainers.image.source=${{ github.repositoryUrl }}
            org.opencontainers.image.revision=${{ github.sha }}
            org.opencontainers.image.licenses=${{ github.event.repository.license.name }}
      # 编译和发布镜像
      - name: Build & Push Docker Image::frps
        uses: docker/build-push-action@v2
        with:
          context: .
          file: ./dockerfiles/Dockerfile-for-frps
          push: true
          tags: ${{ env.IMAGE_FRPS }}:${{ steps.prep.outputs.version }}
          labels: |
            org.opencontainers.image.source=${{ github.repositoryUrl }}
            org.opencontainers.image.revision=${{ github.sha }}
            org.opencontainers.image.licenses=${{ github.event.repository.license.name }}
      # 设置 k8s 环境
      - name: Set up k8s Context
        uses: Azure/k8s-set-context@v1
        with:
          kubeconfig: ${{ env.KUBE_CONFIG }}
      # 配置 容器中心 账号/密码
      - name: Create Container Registry Secret
        uses: Azure/k8s-create-secret@v1
        with:
          namespace: ${{ steps.prep.outputs.env }}
          container-registry-url: ${{ env.IMAGES_HUB_REGISTRY_URL }}
          container-registry-username: ${{ env.IMAGES_HUB_USER_NAME }}
          container-registry-password: ${{ env.IMAGES_HUB_PASSWORD }}
          container-registry-email: ${{ env.IMAGES_HUB_EMAIL }}
          secret-name: k8s-secret
      # 部署到 k8s
      - name: Deploy to k8s
        uses: Azure/k8s-deploy@v1
        with:
          namespace: ${{ steps.prep.outputs.env }}
          manifests: |
            manifests/deployment-frps.yaml
          images: |
            ${{ env.IMAGE_FRPS }}:${{ steps.prep.outputs.version }}
          imagepullsecrets: |
            k8s-secret